% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/penalized.fit.R
\name{penalized_regression}
\alias{penalized_regression}
\title{Penalized Regression Wrapper}
\usage{
penalized_regression(
  X,
  y,
  method = c("lasso", "ridge", "scad", "mcp", "elasticnet"),
  algorithm = c("cda", "fista", "lla"),
  lambda = 1,
  learning_rate = 0.01,
  max_iter = 1000,
  alpha = 0.5,
  gamma = 3.7
)
}
\arguments{
\item{X}{A numeric matrix of predictors (n x p).}

\item{y}{A numeric response vector of length n.}

\item{method}{A character string specifying the penalty type:
one of "lasso", "ridge", "elasticnet", "scad", or "mcp".}

\item{algorithm}{A character string specifying the optimization algorithm:
one of "cda" (Coordinate Descent Algorithm), "fista" (Fast Iterative Shrinkage-Thresholding Algorithm),
or "lla" (Local Linear Approximation).}

\item{lambda}{A non-negative regularization parameter controlling the overall penalty strength.}

\item{learning_rate}{A positive numeric learning rate for gradient-based algorithms (default: 0.01).}

\item{max_iter}{An integer specifying the maximum number of iterations (default: 1000).}

\item{alpha}{Elastic Net mixing parameter (between 0 and 1, default: 0.5). Only used if \code{method = "elasticnet"}.}

\item{gamma}{A tuning parameter for SCAD and MCP (typically >= 3.7, default: 3.7).}
}
\value{
A numeric vector of estimated regression coefficients of length p.
}
\description{
A unified function to fit penalized regression models using various penalty
methods and optimization algorithms. This wrapper handles Ridge, Lasso, Elastic Net,
SCAD, and MCP penalties, with support for Coordinate Descent (CDA), FISTA,
and Local Linear Approximation (LLA) algorithms.
}
\details{
The function automatically checks for compatibility between the selected
penalty method and optimization algorithm, issuing warnings or errors if
inappropriate combinations are chosen.
}
\examples{
\dontrun{
set.seed(123)
X <- matrix(rnorm(100*10), 100, 10)
y <- rnorm(100)
beta <- penalized_regression(X, y, method = "lasso", algorithm = "cda", lambda = 0.1)
}

}
